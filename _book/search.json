[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Faire des courbes dose-réponse avec R et drc",
    "section": "",
    "text": "1 Objectifs de ce repo\nLe but ici n’est pas d’être exhaustif mais de donner le pied à l’étrier à quelqu’un qui voudrait en savoir plus sur la modélisation de courbe dose-réponse.\nLes exemples sont basés sur des données simulées à partir du fichier R/Sim_data.R et sauvegarder dans le dossier data.\nN’hésitez pas à me dire s’il y a des erreurs dans ce dépôt.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Objectifs de ce repo</span>"
    ]
  },
  {
    "objectID": "quarto/A_Theorie_courbe_dose_reponse.html",
    "href": "quarto/A_Theorie_courbe_dose_reponse.html",
    "title": "2  Principe des courbes dose-réponse",
    "section": "",
    "text": "Les courbes dose-réponse sont un outil puissant pour comprendre l’effet des substances chimiques sur les organismes. Une bonne modélisation permet d’estimer les seuils critiques et d’optimiser les doses en fonction des objectifs scientifiques ou réglementaires.\nDéfinitions Clés :\n\nDose\n\nQuantité d’une substance administrée à un organisme.\n\nRéponse\n\nEffet mesuré, comme la mortalité, la croissance ou la reproduction.\n\nEC\\(_{50}\\) (Concentration Effective 50%)\n\nDose à laquelle 50% de la réponse maximale est observée.\n\nNOEC (No Observed Effect Concentration)\n\nConcentration testée la plus élevée sans effet observable.\n\nLOEC (Lowest Observed Effect Concentration)\n\nConcentration testée la plus faible à laquelle un effet significatif est observé.\n\n\nMême s’il existe des variantes, les courbes dose-réponse sont la plupart du temps modéliser par un modèle de Hill, aussi appelé modèle log-logistique à 4 paramètres (Equation 2.1, Figure 2.1).\n\\[\nY=Y_{min}+\\frac{Y_{max}-Y_{min}}{1+\\text{exp}(Slope\\times [\\text{Ln}(Dose)-\\text{Ln}(EC_{50})])}\n\\tag{2.1}\\]\nAvec :\n\n\\(Y\\) : Réponse pour une dose donnée,\n\\(Y_{min}\\) : Réponse minimale,\n\\(Y_{max}\\) : Réponse maximale,\n\\(EC_{50}\\) : Dose pour laquelle la réponse vaut \\((Y_{max}-Y_{min})/2\\),\n\\(Slope\\) : Pente de la courbe lorsque la dose équivaut à l’EC\\(_{50}\\).\n\n\n\n\n\n\n\n\n\nFigure 2.1: Schematic representation of a dose-response curve with the Hill model\n\n\n\n\n\nIntéprétation :\n\nUne courbe plus abrupte indique une réponse très sensible aux variations de dose.\nUne EC\\(_{50}\\) faible signifie que l’organisme est très sensible à la substance.\nLes valeurs de NOEC, LOEC et EC\\(_{50}\\) permettent d’évaluer la toxicité et de fixer des seuils de sécurité.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Principe des courbes dose-réponse</span>"
    ]
  },
  {
    "objectID": "quarto/B_Courbe_dose_reponse_avec_R.html",
    "href": "quarto/B_Courbe_dose_reponse_avec_R.html",
    "title": "3  Modélisation de la courbe dose-réponse - Exemple",
    "section": "",
    "text": "3.1 Etape 1 - Importer et visualiser ses données\nOn s’intéresse à l’impact de la concentration en éther dans l’air (mg/L) sur la croissance et la reproduction des dragons.\nCode\n1df_sim_croiss &lt;- read_excel(here::here(\"data/Data_sim_croiss_dragon.xlsx\")) |&gt;\n3  mutate(Dose_f = as.factor(Dose))\n2df_sim_repro &lt;- read_excel(here::here(\"data/Data_sim_repro_dragon.xlsx\")) |&gt;\n4  mutate(Dose_f = as.factor(Dose))\n\n\n\n1\n\nImportation des données de croissance de nos dragons\n\n2\n\nImportation des données de reproduction de nos dragons\n\n3\n\nCreation de Dose_f, de type factor\n\n4\n\nCreation de Dose_f, de type factor\nCode\n1head(df_sim_croiss)\nhead(df_sim_repro)\n\n\n\n1\n\nAffiche les 5 premières lignes\n\n\n\n\n# A tibble: 6 × 4\n     ID  Dose nb_rep Txcroiss\n  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n1     1     0      1     34.3\n2     2     0      2     35.4\n3     3     0      3     39.2\n4     4     0      4     23.6\n5     5     0      5     25.5\n6     6     5      1     24.4\n# A tibble: 6 × 4\n     ID  Dose nb_rep  Oeuf\n  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1     1  0         1  22.5\n2     2  0         2  20.5\n3     3  0         3  12.7\n4     4  0         4  18.3\n5     5  0         5  16.3\n6     6  0.25      1  14.2\nOn a des jeux de données avec :\nIl serait bien de d’avoir des jeux de donnée avec la moyenne du taux de croissance et la moyenne du nombre d’oeuf produit par dose testée.\nCode\n1df_sim_croiss_mean &lt;- df_sim_croiss |&gt;\n  aggregate(Txcroiss ~ Dose, FUN = mean)\n\ndf_sim_repro_mean &lt;- df_sim_repro |&gt;\n  aggregate(Oeuf ~ Dose, FUN = mean)\n\nhead(df_sim_croiss_mean)\nhead(df_sim_repro_mean)\n\n\n\n1\n\nCreation de nouveaux dataframes avec le taux de croissance et le nombre d’oeufs produits moyen par dose.\n\n\n\n\n       Dose Txcroiss\n1   0.00000  31.5948\n2   5.00000  22.9434\n3  10.77217  33.6770\n4  23.20794  29.5730\n5  50.00000  22.2080\n6 107.72173  12.3238\n        Dose  Oeuf\n1  0.0000000 18.06\n2  0.2500000 16.94\n3  0.7905694 18.82\n4  2.5000000 19.32\n5  7.9056942 12.26\n6 25.0000000  6.62\nMaintenant qu’on a importé nos données, on peut les visualiser de différentes façons.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modélisation de la courbe dose-réponse - Exemple</span>"
    ]
  },
  {
    "objectID": "quarto/B_Courbe_dose_reponse_avec_R.html#etape-1---importer-et-visualiser-ses-données",
    "href": "quarto/B_Courbe_dose_reponse_avec_R.html#etape-1---importer-et-visualiser-ses-données",
    "title": "3  Modélisation de la courbe dose-réponse - Exemple",
    "section": "",
    "text": "ID : Numéro unique du dragon\nNb_rep : Numéro de réplicat par rapport à un dose donnée\nDose : Dose d’exposition du dragon (mg/L)\nOeuf : Le nombre d’oeuf produit par le dragon en 1 an\nTxcroiss : Le taux de croissance du dragon (kg/jour)\n\n\n\n\n\nDotsBoxplot\n\n\nOn peut faire un graphique avec deux types de points : Les points correspondant aux réplicats et les points correspondant à la moyenne pour une dose donnée (Figure 3.1).\n\n\nCode\n# Paramètres des graphiques \nsize_mean &lt;- 3\nalpha_rep &lt;- 0.5\n\n1p_C &lt;- ggplot()+\n  \n  # Nuage de points avec un point par réplicat\n  geom_point(\n2      data = df_sim_croiss,\n3      mapping = aes(\n        x = Dose,\n        y = Txcroiss\n      ),\n4      alpha = alpha_rep,\n5      color = col_croiss\n      )+\n  \n  # Nuage de points correspondant aux moyennes par dose\n  geom_point(\n      data = df_sim_croiss_mean,\n      mapping = aes(\n        x = Dose,\n        y = Txcroiss\n      ),\n      alpha = 1,\n      color = col_croiss,\n6      size = size_mean\n      )+\n  \n7  scale_x_log10()+\n  \n8  labs(\n    x = \"Dose en éther (mg/L)\",\n    y = \"Taux de croissance des dragons (kg/jour)\"\n  )+\n9  theme_minimal()\n\np_R &lt;- ggplot()+ \n  \n  # Nuage de points avec un point par réplicat\n  geom_point(\n      data = df_sim_repro, \n      mapping = aes( \n        x = Dose, \n        y = Oeuf \n      ), \n      alpha = alpha_rep, \n      color = col_repro\n      )+\n  \n  # Nuage de points correspondant aux moyennes par dose\n  geom_point(\n      data = df_sim_repro_mean,\n      mapping = aes(\n        x = Dose,\n        y = Oeuf\n      ),\n      alpha = 1,\n      color = col_repro,\n      size = size_mean\n      )+\n  \n  scale_x_log10()+\n  \n  labs( \n    x = \"Dose en éther (mg/L)\",\n    y = \"Nombre d'oeufs produits par les dragons (#)\"\n  )+\n  theme_minimal()\n\n10p &lt;- p_C + p_R +\n  plot_layout(ncol = 2)\np \n\n\n\n1\n\nInitialisation du graphique\n\n2\n\nDonnées utilisées pour ce nuage de points\n\n3\n\nAxes à utiliser pour ce nuage de points\n\n4\n\nTransparence des points\n\n5\n\nCouleur des points\n\n6\n\nTaille des points pour ce nuage de points\n\n7\n\nAxe des x mis en échelle log (logarithme base 10)\n\n8\n\nTitres des axes\n\n9\n\nAspect général du graphique\n\n10\n\nLes deux graphiques sont mis côte à côte\n\n\n\n\n\n\n\n\n\n\nFigure 3.1: Taux de croissance et production d’oeufs des dragons en fonction de la dose d’éther\n\n\n\n\n\n\n\nOu on peut faire des bowplots, où la dose est bien une catégorie et non un nombre (Figure 3.2).\n\n\nCode\n# Paramètres des graphiques \nalpha_box &lt;- 0.2\n\np_C &lt;- ggplot(\n      data = df_sim_croiss,                    \n      mapping = aes(                          \n1        x = as.factor(round(Dose,1)),\n        y = Txcroiss                           \n      )\n  )+                                 \n  \n  # Boxplot\n  geom_boxplot( \n      alpha = alpha_box,                          \n      color = col_croiss,                          \n      fill = col_croiss\n      )+\n  \n  # Points\n  geom_dotplot(\n    binaxis='y', \n2    stackdir='center',\n    dotsize=0.7, \n    alpha=0.9,                          \n    color = col_croiss,\n    fill = col_croiss\n    )+\n  \n  labs(                                         \n    x = \"Dose en éther (mg/L)\",              \n    y = \"Taux de croissance des dragons (kg/jour)\"\n  )+                                             \n  theme_minimal() \n\np_R &lt;- ggplot(\n      data = df_sim_repro,                    \n      mapping = aes(                          \n        x = as.factor(round(Dose,1)),                               \n        y = Oeuf                           \n      )\n  )+                              \n  \n  # Boxplot\n  geom_boxplot(\n      alpha = alpha_box,                          \n      color = col_repro,                          \n      fill = col_repro\n      )+\n  \n  # Points\n  geom_dotplot(\n    binaxis='y', \n    stackdir='center', \n    dotsize=0.7, \n    alpha=0.9,                          \n    color = col_repro,\n    fill = col_repro\n    )+\n  \n  labs(                                         \n    x = \"Dose en éther (mg/L)\",              \n    y = \"Nombre d'oeufs produits par les dragons (#)\"\n  )+                                             \n  theme_minimal() \n\n\np &lt;- p_C + p_R +                                \n  plot_layout(ncol = 2)                        \np \n\n\n\n1\n\nLe type de la variable dose doit être convertit en facteur\n\n2\n\nDisposition des points\n\n\n\n\n\n\n\n\n\n\nFigure 3.2: Taux de croissance et production d’oeufs des dragons en fonction de la dose d’éther",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modélisation de la courbe dose-réponse - Exemple</span>"
    ]
  },
  {
    "objectID": "quarto/B_Courbe_dose_reponse_avec_R.html#etape-2---appliquer-le-modèle-de-hill-aux-données",
    "href": "quarto/B_Courbe_dose_reponse_avec_R.html#etape-2---appliquer-le-modèle-de-hill-aux-données",
    "title": "3  Modélisation de la courbe dose-réponse - Exemple",
    "section": "3.2 Etape 2 - Appliquer le modèle de Hill aux données",
    "text": "3.2 Etape 2 - Appliquer le modèle de Hill aux données\nLes modèles de Hill pour la croissance et la reproduction peuvent présenter des différences :\n\nPour la reproduction, la réponse minimale est connue et fixée à 0, car il est impossible d’observer un nombre d’œufs négatif.\nPour la croissance, le taux minimal n’est pas toujours connu à l’avance, car il peut dépendre de facteurs biologiques et environnementaux.\nLa distribution des valeurs observées diffère entre les deux :\n\nLe taux de croissance suit une distribution normale, car il résulte de variations continues influencées par de multiples facteurs.\nLa reproduction suit une distribution de Poisson, car elle repose sur un comptage d’événements discrets (nombre d’œufs produits).\n\n\nFormellement, les modèles peuvent être écrit de la sorte avec \\(Y_i\\) la réponse d’un individu \\(i\\) exposé à une dose donnée :\n\\[\n\\begin{aligned}\n\\text{Pour la croissance : }Y_i \\sim \\mathcal{N}(\\text{Hill}(Dose_i), \\sigma^2)\n\\end{aligned}\n\\tag{3.1}\\]\n\\[\n\\begin{aligned}\n\\text{Pour la reproduction : }Y_i \\sim \\mathcal{P}(\\text{Hill}(Dose_i))\n\\end{aligned}\n\\tag{3.2}\\]\nLa librairie drc peut maintenant être utilisée.\n\n\nCode\n# Modèle pour la croissance\ndrc.croiss &lt;- drm(\n1  Txcroiss ~ Dose,\n2  data = df_sim_croiss,\n3  fct = LL.4(\n4    names = c(\"slope\", \"Ymin\", \"Ymax\", \"EC50\"),\n5    fixed=c(NA, NA, NA, NA)\n  )\n)\n\n# Modèle pour la reproduction\ndrc.repro &lt;- drm(\n  Oeuf ~ Dose,                                  \n  data = df_sim_repro,\n6  type=\"Poisson\",\n  fct = LL.4(                                   \n    names = c(\"slope\", \"Ymin\", \"Ymax\", \"EC50\"), \n7    fixed=c(NA, 0, NA, NA)\n  )\n)\n\n\n\n1\n\nSpécification de la formule : Endpoint à modéliser = Taux de croissance en fonction de la dose\n\n2\n\nDonnées à utiliser\n\n3\n\nSpécification du type de modèle à utiliser. Il existe différentes variante mais le modèle de Hill (modèle log-logistique à 4 paramètres) est le plus couramment utilisé\n\n4\n\nRe-définition du nom des variables du modèle pour qu’ils soient plus explicites\n\n5\n\nArgument permettant de fixer la valeur de certains paramètres du modèle. NA est mis quand on ne veut pas les fixer mais les estimer.\n\n6\n\nOn spécifie que les résidus suivent une loi de Poisson.\n\n7\n\nOn fixe le minimum à 0 puisqu’on sait que la reproduction minimale correspond à une reproduction à 0.\n\n\n\n\nRésumé du modèle pour la croissance :\n\n\nCode\nsummary(drc.croiss)\n\n\n\nModel fitted: Log-logistic (ED50 as parameter) (4 parms)\n\nParameter estimates:\n\n                   Estimate Std. Error t-value p-value    \nslope:(Intercept)   1.88746    0.73049  2.5838 0.01398 *  \nYmin:(Intercept)   -6.09085    5.62077 -1.0836 0.28573    \nYmax:(Intercept)   29.78746    1.93415 15.4008 &lt; 2e-16 ***\nEC50:(Intercept)  111.42508   31.73265  3.5114 0.00122 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error:\n\n 7.537188 (36 degrees of freedom)\n\n\nRésumé du modèle pour la reproduction :\n\n\nCode\nsummary(drc.repro)\n\n\n\nModel fitted: Log-logistic (ED50 as parameter) (3 parms)\n\nParameter estimates:\n\n                  Estimate Std. Error t-value   p-value    \nslope:(Intercept)  0.82278    0.10627  7.7424 9.764e-15 ***\nYmax:(Intercept)  19.58948    1.26778 15.4518 &lt; 2.2e-16 ***\nEC50:(Intercept)  13.34481    3.62995  3.6763 0.0002366 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nNous pouvons également extraire des EC\\(_{10}\\) des ces modèles :\n\n\nCode\nEC10_croiss &lt;- ED(drc.croiss, 10, interval = \"delta\")\n\n\n\nEstimated effective doses\n\n       Estimate Std. Error   Lower   Upper\ne:1:10  34.7866    13.2517  7.9109 61.6623\n\n\nCode\nEC10_repro &lt;- ED(drc.repro, 10, interval = \"delta\")\n\n\n\nEstimated effective doses\n\n        Estimate Std. Error     Lower     Upper\ne:1:10  0.923696   0.502550 -0.061284  1.908677\n\n\nCode\nEC10_croiss_show &lt;- round(EC10_croiss[1],2)\nEC10_repro_show &lt;- round(EC10_repro[1],2)\n\n\n\nCroissance : EC\\(_{10}\\) = 34.79 mg/L\nReproduction : EC\\(_{10}\\) = 0.92 mg/L",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modélisation de la courbe dose-réponse - Exemple</span>"
    ]
  },
  {
    "objectID": "quarto/B_Courbe_dose_reponse_avec_R.html#etape-3---visualisation-des-résultats-du-modèle",
    "href": "quarto/B_Courbe_dose_reponse_avec_R.html#etape-3---visualisation-des-résultats-du-modèle",
    "title": "3  Modélisation de la courbe dose-réponse - Exemple",
    "section": "3.3 Etape 3 - Visualisation des résultats du modèle",
    "text": "3.3 Etape 3 - Visualisation des résultats du modèle\nPour pouvoir tracer les résultats du modèle proprement avec ggplot, il faut faire quelque tour de passe-passe mais la fonction plot(nom_du_modèle) peut simplement être utilisée.\nOn créé ensuite des dataframes correspondant aux prédictions de la réponse de nos dragons pour un très grand nombre de doses.\nIl faut également qu’on puisse afficher les intervalles de confiance à 95% de notre modèle.\n\n\nCode\n1Dose_x &lt;- expand.grid(\n  exp(\n    seq(\n      log(0.01),log(5000),\n      by=(log(5000)-log(0.01))/100\n      )\n    )\n  )\n\nCI.croiss &lt;- data.frame(\n  Dose=Dose_x$Var1\n  )\n\n2pm.croiss &lt;- predict(drc.croiss, newdata=CI.croiss, interval=\"confidence\")\nCI.croiss$p &lt;- pm.croiss[,1]\nCI.croiss$pmin &lt;- pm.croiss[,2]\nCI.croiss$pmax &lt;- pm.croiss[,3]\n\nCI.repro &lt;- data.frame(\n  Dose=Dose_x$Var1\n  )\n\n3pm.repro &lt;- predict(drc.repro, newdata=CI.repro, interval=\"confidence\")\nCI.repro$p &lt;- pm.repro[,1]\nCI.repro$pmin &lt;- pm.repro[,2]\nCI.repro$pmax &lt;- pm.repro[,3]\n\n\n\n1\n\nChoix des doses pour lesquelles on veut une prédiction du modèle\n\n2\n\nPrédictions pour la croissance\n\n3\n\nPrédiction pour la reproduction\n\n\n\n\nGrâce à tout cela on peut enfin tracer nos graphiques.\n\n\nCode\n# Paramètres des graphiques \nsize_mean &lt;- 3\nalpha_rep &lt;- 0.5\nalpha_ribbon &lt;- 0.2\nline_width &lt;- 1.2 \n\np_drc_C &lt;- ggplot()+\n  \n  # Affichage des intervalles de confiance à 95%\n  geom_ribbon(\n    data=CI.croiss, \n    aes(\n      x=Dose, \n      y=p, \n      ymin=pmin, ymax=pmax\n      ), \n    alpha=alpha_ribbon,\n    #color = col_croiss,\n    fill = col_croiss\n    )+\n  \n  # Affichage de la courbe prédite par le modèle\n  geom_line(\n    data = CI.croiss, \n    aes(\n      x=Dose, \n      y=p\n      ),\n    linewidth = line_width,\n    color = col_croiss\n    )+\n  \n  # On réaffiche nos données de la même manière que précédement\n  geom_point(\n    data=df_sim_croiss, \n    aes(\n      x=Dose, \n      y=Txcroiss\n      ), \n    alpha=alpha_rep,\n    color = col_croiss\n    )+\n  geom_point(\n    data=df_sim_croiss_mean, \n    aes(\n      x=Dose, \n      y=Txcroiss\n      ), \n    alpha=1,\n    size = size_mean,\n    color = col_croiss\n    )+\n  \n  scale_x_log10()+\n  \n  labs(\n  x=\"Dose en éther (mg/kg)\",\n  y=\"Taux de croissance des dragons (kg/jour)\"\n  )+\n\n  theme_minimal()\n\np_drc_R &lt;- ggplot()+\n  \n  # Affichage des intervalles de confiance à 95%\n  geom_ribbon(\n    data=CI.repro, \n    aes(\n      x=Dose, \n      y=p, \n      ymin=pmin, ymax=pmax\n      ), \n    alpha=alpha_ribbon,\n    #color = col_repro,\n    fill = col_repro\n    )+\n  \n  # Affichage de la courbe prédite par le modèle\n  geom_line(\n    data = CI.repro, \n    aes(\n      x=Dose, \n      y=p\n      ),\n    linewidth = line_width,\n    color = col_repro\n    )+\n  \n  # On réaffiche nos données de la même manière que précédement\n  geom_point(\n    data=df_sim_repro, \n    aes(\n      x=Dose, \n      y=Oeuf\n      ), \n    alpha=alpha_rep,\n    color = col_repro\n    )+\n  geom_point(\n    data=df_sim_repro_mean, \n    aes(\n      x=Dose, \n      y=Oeuf\n      ), \n    alpha=1,\n    size = size_mean,\n    color = col_repro\n    )+\n  \n  scale_x_log10()+\n  \n  labs(\n  x=\"Dose en éther (mg/kg)\",\n  y=\"Nombre d'oeuf produits par les dragons (#)\"\n  )+\n\n  theme_minimal()\n\np &lt;- p_drc_C + p_drc_R +                              \n  plot_layout(ncol = 2)                        \np\n\n\n\n\n\n\n\n\nFigure 3.3: Taux de croissance et production d’oeufs des dragons en fonction de la dose d’éther",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modélisation de la courbe dose-réponse - Exemple</span>"
    ]
  },
  {
    "objectID": "quarto/B_Courbe_dose_reponse_avec_R.html#etape-4---validation-du-modèle",
    "href": "quarto/B_Courbe_dose_reponse_avec_R.html#etape-4---validation-du-modèle",
    "title": "3  Modélisation de la courbe dose-réponse - Exemple",
    "section": "3.4 Etape 4 - Validation du modèle",
    "text": "3.4 Etape 4 - Validation du modèle\n\n\nCode\nplot_QQ.croiss &lt;- ggplot(\n  mapping=aes(\n    sample=residuals(drc.croiss)\n    )\n  )+\n  stat_qq(\n    alpha=0.3,\n    color=col_croiss\n    )+\n  stat_qq_line(color=col_croiss)+\n  labs(\n    x=\"Normal quantiles\", \n    y=\"Residuals\",\n    title = \"Croissance\"\n    )+\n  theme_minimal()\n\nplot_resfit.croiss &lt;- ggplot()+\n  geom_point(\n    mapping=aes(\n      x=fitted(drc.croiss), \n      y=residuals(drc.croiss)\n      ), \n    color=col_croiss, \n    alpha=0.3\n    )+\n  labs(\n    x=\"Fitted\", \n    y=\"Residuals\",\n    title = \"Croissance\"\n    )+\n  scale_x_log10()+\n  theme_minimal()\n\nplot_QQ.repro &lt;- ggplot(\n  mapping=aes(\n    sample=residuals(drc.repro)\n    )\n  )+\n  stat_qq(\n    alpha=0.3,\n    color=col_repro\n    )+\n  stat_qq_line(color=col_repro)+\n  labs(\n    x=\"Normal quantiles\", \n    y=\"Residuals\",\n    title = \"Reproduction\"\n    )+\n  theme_minimal()\n\nplot_resfit.repro &lt;- ggplot()+\n  geom_point(\n    mapping=aes(\n      x=fitted(drc.repro), \n      y=residuals(drc.repro)\n      ), \n    color=col_repro, \n    alpha=0.3\n    )+\n  labs(\n    x=\"Fitted\", \n    y=\"Residuals\",\n    title = \"Reproduction\"\n    )+\n  scale_x_log10()+\n  theme_minimal()\n\nplot &lt;- plot_resfit.croiss + plot_QQ.croiss + plot_resfit.repro + plot_QQ.repro + plot_layout(ncol=2)\nplot\n\n\n\n\n\n\n\n\nFigure 3.4: Diagnostic graphs\n\n\n\n\n\nTest de la normalité des résidus :\n\n\nCode\nshapiro.test(residuals(drc.croiss))\n\n\n\n    Shapiro-Wilk normality test\n\ndata:  residuals(drc.croiss)\nW = 0.96991, p-value = 0.3575\n\n\nCode\nshapiro.test(residuals(drc.repro))\n\n\n\n    Shapiro-Wilk normality test\n\ndata:  residuals(drc.repro)\nW = 0.97294, p-value = 0.4437\n\n\nL’hypothèse nulle spécifie la normalité des résidus, alors que l’hypothèse alternative spécifie la non-normalité. La p-value étant &gt;0.05, rien ne permet de rejeter cette hypothèse de normalité.\nTest de l’homogénéité des résidus :\n\n\nCode\nbartlett.test(\n  residuals(drc.croiss), \n  as.factor(df_sim_croiss$Dose)\n  ) \n\n\n\n    Bartlett test of homogeneity of variances\n\ndata:  residuals(drc.croiss) and as.factor(df_sim_croiss$Dose)\nBartlett's K-squared = 5.6592, df = 7, p-value = 0.5801\n\n\nCode\nbartlett.test(\n  residuals(drc.repro), \n  as.factor(df_sim_repro$Dose)\n  ) \n\n\n\n    Bartlett test of homogeneity of variances\n\ndata:  residuals(drc.repro) and as.factor(df_sim_repro$Dose)\nBartlett's K-squared = 13.409, df = 7, p-value = 0.06275\n\n\nL’hypothèse nulle spécifie l’homogénéité des résidus, alors que l’hypothèse alternative spécifie leur hétérogénéité. La p-value étant &gt;0.05, rien ne permet de rejeter cette hypothèse d’homogénéité des résidus.\nNos hypothèses de normalité et d’homocédasticité des résidus sont vérifiées. Nos modèles sont valides.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modélisation de la courbe dose-réponse - Exemple</span>"
    ]
  },
  {
    "objectID": "quarto/B_Courbe_dose_reponse_avec_R.html#etape-5---détermination-de-la-noec-et-de-la-loec",
    "href": "quarto/B_Courbe_dose_reponse_avec_R.html#etape-5---détermination-de-la-noec-et-de-la-loec",
    "title": "3  Modélisation de la courbe dose-réponse - Exemple",
    "section": "3.5 Etape 5 - Détermination de la NOEC et de la LOEC",
    "text": "3.5 Etape 5 - Détermination de la NOEC et de la LOEC\nPour déterminer la NOEC et la LOEC, il faut regarder si nos points expérimentaux sont significativement différents entre eux.\n\n3.5.1 Pour la croissance\n\n\nCode\nshapiro.test(df_sim_croiss$Txcroiss)  \n\n\n\n    Shapiro-Wilk normality test\n\ndata:  df_sim_croiss$Txcroiss\nW = 0.96064, p-value = 0.1761\n\n\n\n\nCode\nbartlett.test(\n  Txcroiss~Dose_f,\n  data=df_sim_croiss\n  )\n\n\n\n    Bartlett test of homogeneity of variances\n\ndata:  Txcroiss by Dose_f\nBartlett's K-squared = 5.6592, df = 7, p-value = 0.5801\n\n\nL’hypothèse de normalité des données et d’homogénéité des variances sont vérifiées.\n\n\nCode\nlm.croiss &lt;- aov(Txcroiss ~ Dose_f, data = df_sim_croiss)\nsummary(lm.croiss)\n\n\n            Df Sum Sq Mean Sq F value   Pr(&gt;F)    \nDose_f       7   7028  1004.0   19.05 9.36e-10 ***\nResiduals   32   1687    52.7                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nCode\ndunnett.test.croiss &lt;- glht(lm.croiss, linfct = mcp(Dose_f = \"Dunnett\"))\nsummary(dunnett.test.croiss)\n\n\n\n     Simultaneous Tests for General Linear Hypotheses\n\nMultiple Comparisons of Means: Dunnett Contrasts\n\n\nFit: aov(formula = Txcroiss ~ Dose_f, data = df_sim_croiss)\n\nLinear Hypotheses:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n5 - 0 == 0                  -8.651      4.592  -1.884  0.29015    \n10.7721734501594 - 0 == 0    2.082      4.592   0.453  0.99742    \n23.2079441680639 - 0 == 0   -2.022      4.592  -0.440  0.99784    \n50 - 0 == 0                 -9.387      4.592  -2.044  0.21927    \n107.721734501594 - 0 == 0  -19.271      4.592  -4.197  0.00139 ** \n232.079441680639 - 0 == 0  -29.818      4.592  -6.494  &lt; 0.001 ***\n500 - 0 == 0               -36.122      4.592  -7.866  &lt; 0.001 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n(Adjusted p values reported -- single-step method)\n\n\nD’après ces résultats, on en déduit que pour notre jeu de données :\n\nNOEC = 50 mg/L\nLOEC = 107.7 mg/L\n\n\n\n3.5.2 Pour la reproduction\n\n\nCode\nshapiro.test(df_sim_repro$Oeuf)  \n\n\n\n    Shapiro-Wilk normality test\n\ndata:  df_sim_repro$Oeuf\nW = 0.95112, p-value = 0.08287\n\n\n\n\nCode\nbartlett.test(\n  Oeuf~Dose_f,\n  data=df_sim_repro\n  )\n\n\n\n    Bartlett test of homogeneity of variances\n\ndata:  Oeuf by Dose_f\nBartlett's K-squared = 13.409, df = 7, p-value = 0.06275\n\n\nL’hypothèse de normalité des données et d’homogénéité des variances sont vérifiées.\n\n\nCode\nlm.repro &lt;- aov(Oeuf ~ Dose_f, data = df_sim_repro)\nsummary(lm.repro)\n\n\n            Df Sum Sq Mean Sq F value   Pr(&gt;F)    \nDose_f       7 1937.4   276.8   17.52 2.63e-09 ***\nResiduals   32  505.6    15.8                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nCode\ndunnett.test.repro &lt;- glht(lm.repro, linfct = mcp(Dose_f = \"Dunnett\"))\nsummary(dunnett.test.repro)\n\n\n\n     Simultaneous Tests for General Linear Hypotheses\n\nMultiple Comparisons of Means: Dunnett Contrasts\n\n\nFit: aov(formula = Oeuf ~ Dose_f, data = df_sim_repro)\n\nLinear Hypotheses:\n                           Estimate Std. Error t value Pr(&gt;|t|)    \n0.25 - 0 == 0                -1.120      2.514  -0.445    0.998    \n0.790569415042095 - 0 == 0    0.760      2.514   0.302    1.000    \n2.5 - 0 == 0                  1.260      2.514   0.501    0.995    \n7.90569415042095 - 0 == 0    -5.800      2.514  -2.307    0.133    \n25 - 0 == 0                 -11.440      2.514  -4.550   &lt;0.001 ***\n79.0569415042095 - 0 == 0   -17.520      2.514  -6.969   &lt;0.001 ***\n250 - 0 == 0                -14.180      2.514  -5.640   &lt;0.001 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n(Adjusted p values reported -- single-step method)\n\n\nD’après ces résultats, on en déduit que pour notre jeu de données :\n\nNOEC = 7.9 mg/L\nLOEC = 25 mg/L\n\nSi une des hypothèses n’était pas vérifiée, on ferait :\n\n\nCode\nkruskal.test(Oeuf ~ Dose_f, data = df_sim_repro)\n\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  Oeuf by Dose_f\nKruskal-Wallis chi-squared = 30.529, df = 7, p-value = 7.592e-05\n\n\nCode\ndunn.repro &lt;- dunnTest(Oeuf ~ Dose_f, data = df_sim_repro, method = \"bonferroni\")\n\ndunn_results &lt;- as.data.frame(dunn.repro$res) \ndunn_results |&gt; \n  dplyr::select(Comparison, P.adj)\n\n\n                             Comparison       P.adj\n1                              0 - 0.25 1.000000000\n2                 0 - 0.790569415042095 1.000000000\n3              0.25 - 0.790569415042095 1.000000000\n4                               0 - 2.5 1.000000000\n5                            0.25 - 2.5 1.000000000\n6               0.790569415042095 - 2.5 1.000000000\n7                                0 - 25 0.578731836\n8                             0.25 - 25 1.000000000\n9                0.790569415042095 - 25 0.400778928\n10                             2.5 - 25 0.331444950\n11                              0 - 250 0.125636139\n12                           0.25 - 250 0.272963926\n13              0.790569415042095 - 250 0.081491244\n14                            2.5 - 250 0.065214131\n15                             25 - 250 1.000000000\n16                 0 - 7.90569415042095 1.000000000\n17              0.25 - 7.90569415042095 1.000000000\n18 0.790569415042095 - 7.90569415042095 1.000000000\n19               2.5 - 7.90569415042095 1.000000000\n20                25 - 7.90569415042095 1.000000000\n21               250 - 7.90569415042095 1.000000000\n22                 0 - 79.0569415042095 0.013460784\n23              0.25 - 79.0569415042095 0.034160935\n24 0.790569415042095 - 79.0569415042095 0.008041486\n25               2.5 - 79.0569415042095 0.006175182\n26                25 - 79.0569415042095 1.000000000\n27               250 - 79.0569415042095 1.000000000\n28  7.90569415042095 - 79.0569415042095 0.578731836\n\n\nLe test de Kruskal-Wallis nous donne bien l’information qu’il y a un effet de la dose sur le nombre d’oeufs produits par nos dragons. En revanche, le test de dunnet ne nous permet pas de déterminer une NOEC et une LOEC. Cela est du à la plus faible puissance statistique d’un test non-paramétrique vs. paramétrique comme utilisé juste avant.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modélisation de la courbe dose-réponse - Exemple</span>"
    ]
  }
]